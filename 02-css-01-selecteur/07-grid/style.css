*, ::before, ::after {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
body {
    min-height: 100vh;
    /*
        Le display grid s'applique sur le parent des éléments que l'on souhaite placer.
    */
    display: grid;
    /*
        grid-template-rows permet d'indiquer le nombre et la taille des rangés de notre grille.
        Chaque rangé est séparé d'un espace avec en valeur, la hauteur de cette rangée.

        auto indique que la rangé prendra juste la hauteur dont elle a besoin.
        1fr signifie "1 fraction du site", utilisée sans autres unités fr, cela lui offrira tout l'espace restant ( si l'on a d'autres valeurs : exemple: 1fr 1fr 2fr ( ca fera 25%, 25% et 50%, le 2fr prendra 50% de la place du site)
    */
    grid-template-rows: auto 1fr auto;
}
/*grid-template est la propriété raccourcie qui combine grid-template-rows et grid-template-columns.

Par exemple, grid-template: 50% 50% / 200px; créera une grille avec 2 lignes de 50% de hauteur chacune et une colonne de 200 pixels de large.

Essayez à l'aide de grid-template d'arroser une région comprenant 60% du haut et 200 pixels à gauche de votre jardin.
grid-template: row en premier / colonne en 2nd
soit grid-template: 1fr 50% / 20% 1fr  ( 1ligne qui prend 1 fraction de la page et la deuxième 50% du reste et une colonne de 20% et une colonne de 1 fraction de la page)
*/
main {
    display: grid;

    /*
        grid-template-columns permet de définir le nombre et la taille des colonnes.
        Il fonctionne comme grid-template-rows.

        Si on souhaite plusieurs colonnes (ou rangés) de même taille.
        On peut utiliser la fonction "repeat" avec en 1ère valeur, le nombre de fois que l'on souhaite répéter, et en second la valeur.
    */
    grid-template-columns: repeat(5, 15%); /* Ici on veut  colonnes faisant 15% en taille*/
    grid-template-rows: 2fr 1fr repeat(2, 60px);
    /*grid-template-rows: 2fr 1fr 200px 100px; */
    /* Si la largeur de mes colonnes ne remplissent pas le conteneur. Je peux espacer mes colonnes avec "justify-content" */
    justify-content: space-evenly;
}
/*
    Par défaut, mes éléments viennent se placer dans l'ordre des cases. 
    Le premier élément, dans la première case et ainsi de suite. 
    Mais on peut venir modifier cela
*/

/* Pour voir les colonnes, les afficher à l'aide de la console sur le navigateur en cochant grille*/
main > div:nth-child(1){
    background-color: lightgreen;
    /* Permet d'indiquer à partir de quelle colonne mon élément commence */ 
    grid-column-start: 2;
    /*  Permet d'indiquer à quelle colonne mon élément fini
    Ici elle va jusqu'à la 4eme colonne car pour prendre la 5eme il faudrait mettre grid-column-end: 6; */
    grid-column-end: 5;
    /*  Permet d'indiquer à quelle rangée mon élément commence et fini
    Ici, elle commence à la première ligne et fini à la deuxième car grid-row-end: 3; (le 3 prend la deuxième ligne)*/
    grid-row-start: 1;  
    grid-row-end: 3;
}
main > div:nth-child(2){
    background: lightblue;
    /*  fusion de grid-column-start et grid-column-end*/
    grid-column: 1/2; /* prend en compte que la 1ère colonne*/
    /* fusion de grid-row-start et grid-row-end */
    grid-row: 1/3; /* fini à la 2ème ligne*/
}
main > div:nth-child(3){
    background: lightcoral;
    /* Fusion des 4 avec  : 
    row-start / column-start / row-end / column-end */
    grid-area: 1/5/4/6; /* commence ligne 1, à la 5eme colonne et va jusqu'à la 3ème ligne et la 5eme colonne*/
}
main > div:nth-child(4){
    background: lightseagreen;
    /*  Plutôt d'indiquer une rangé ou une colonne de fin, je peux utiliser le mot clef "span" pour indiquer le nombre de colonne ou de rangé qu'il doit prendre */
    grid-row: 3/span 2;         /* à partir de la ligne 3 tu prend 2 lignes */
    grid-column: 1/span 2;      /* à partir de la colonne 1 tu prend 2 lignes */ 
}
main > div:nth-child(5){
    background-color: rgb(236, 236, 4);
    /* ! Attention, on peut volontairement ou involontairement, avoir nos cases qui se superposent */
    grid-row: 2 / span 3;
    grid-column: 2/span 3;
}
/* exemple jeu: 
    Jusqu'à présent, vous aviez mis votre jardin dans une grille avec cinq colonnes, chacune ayant une largeur de 20%, et cinq lignes, chacune ayant une hauteur de 20%.

Cela a été fait avec les règles grid-template-columns: 20% 20% 20% 20% 20%; et grid-template-rows: 20% 20% 20% 20% 20%; Chaque règle comporte cinq valeurs qui créent cinq colonnes, chacune correspond à 20% de la largeur totale du jardin.

Mais vous pouvez configurer la grille comme vous le souhaitez. Donnez une nouvelle valeur à grid-template-columns pour arroser vos carottes. Vous devez définir la largeur de la 1ère colonne à 50%.
grid-template-columns: 50% 
*/
/*
    grid-template-columns n'accepte pas seulement les valeurs en pourcentage, mais aussi les unités de longueur comme pixels et ems. Vous pouvez même mélanger différentes unités.

Ici, définissez respectivement trois colonnes à 100px, 3em et 40%.
*/

/* les éléments non placé, iront se placer là où il reste de la place */

/*Si les éléments de la grille ne sont pas explicitement positionnés avec grid-area, grid-column, grid-row, etc., ils sont automatiquement positionnés selon leur ordre dans le code source. Nous pouvons remplacer ceci en utilisant la propriété order, c'est l'un des avantages de la grille par rapport à la mise en page basée sur une table.

Par défaut, tous les éléments de la grille ont order à 0, mais cela peut être défini sur n'importe quelle valeur positive ou négative, c'est similaire à z-index.

À l'heure actuelle, les carottes dans la deuxième colonne sont empoisonnées et les mauvaises herbes dans la dernière colonne sont arrosées. Changez la valeur de order du poison pour résoudre ce problème immédiatement !*/