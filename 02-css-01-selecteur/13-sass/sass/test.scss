@use "liste";
h1 {
    color: red;
    font-style: italic;
}
h2 {
    color: gray;
}
// ---------------- Nesting -------------------
/* Le nesting permet d'inclure un sélecteur CSS dans un autre */
section.sass {
    background-color: aquamarine;
    h2 {
        background-color: brown;
        color: chartreuse;
        // Le sélecteur de nidification qui fait référence au parent: 
        &:hover {
            scale: 1.5;
        }
    }
}
//-------------------------- Les variables ---------------------
/*
    Avant même que les variables CSS existent, SASS avait ses propres variables. 
    Elles doivent commencer par un $
*/
$colorMain: violet;
.scss {
    background-color: $colorMain;
}
// ---------------- Extends --------------------
/*
    extends permet de reprendre un morceau de CSS, et de le réutiliser à plusieurs endroits. 
    Ils commencent par un "%" suivi d'un nom. 
*/
%flexCenter {
    display: flex;
    justify-content: center;
    align-items: center;
}
/*
    Pour utiliser mon "extends", j'utiliserais "@extend" suivi du nom de celui-ci.
*/
header {
    @extend %flexCenter;
    // On peut aussi utiliser "@extend" pour récupérer le code d'une classe.
    @extend .scss;
}
main ul {
    @extend %flexCenter;
}
// ------------------ MIXIN -------------
/*
    Les mixins ressemblent aux extends, à la différence, qu'ils peuvent prendre, des paramètres.
    Pour les déclarer, on utilisera : 
    @mixin unNom(paramètre 1, paramètre 2...){contenu de la mixin}
*/
@mixin absol($top, $l, $trX:-50%, $trY:-50%) /*absol($top, $l, $trX, $trY)*/{
    // On peut placer des valeurs par défaut à nos paramètres. Si aucune valeur n'est fourni, alors la valeur par défaut sera utilisée, il faut qu'on commence par la droite, on ne peut pas mettre une valeur à $top sans en mettre aux autres 
    position: absolute;
    top: $top;
    left: $l;
    transform: translate($trX, $trY);
}
/* Pour utiliser une mixin, on utilisera "@include" suivi du nom de la mixin, de parenthèse contenant les différents paramètres obligatoires. */
.copy {
    font-size: 4rem;
    background-color: mediumpurple;
    @include absol(90%, 90%)   /* les 2 90% pour $top et $left et les 2 -50% pour le transform $trX et $trY */
    /*@include absol(90%, 90%, -50%, -50%)  Pas besoin de mettre les -50% vu qu'on les as par défaut sur le @mixin*/ 
}
.menu {
    font-size: 3rem;
    background-color: dodgerblue;
    @include absol(5%,5%,$trY:100%)
}
// ------------------------ Fonctions ----------------
/*
    Certaines fonctions sont directement disponible dans SASS, mais on peut aussi créer les notres à la différence d'une mixin, elle n'affichera pas de css, mais retournera une valeur.
*/
@function compLight($color){
    // Complement est une fonction sass, qui retourne une couleur complémentaire (utile pour les contrastes)
    $comp: complement($color);
    
    //lighten est une fonction sass, qui retourne une couleur éclairci d'un certain pourcentage 
    $light: lighten($comp, 5%);

    // puis on retourne la valeur choisi avec @return (pour renvoyer ici la couleur éclairci
    @return $light;
}
.copy {
    color:compLight(red)
}
// ------------------ Conditions --------------------
@mixin radius($w,$h){
    width: $w;
    height: $h;
    /*
        Avec SASS, nous pouvons conditionner certaines valeurs, par exemple ici, nous allons dire, que "si" la hauteur et la largeur sont les mêmes, alors nous allons effectuer une action, "sinon" on en fera une autre.
    */
    @if $w == $h {
        border-radius: 50%;
    }
    @else {
        border-radius: 5px;
    }
}
.copy {
    @include radius(5rem, 5rem)
}
.menu {
    @include radius(10rem, 5rem)
}